import { Observable, Subscription } from 'rxjs';
import 'rxjs/add/operator/combineLatest';
import 'rxjs/add/operator/startWith';
export declare function elemToArr<T>(arr: Array<T>, x: T): Array<T>;
export declare function arrToArr<T, U>(a: Array<T | U>, b: Array<U>): Array<T | U>;
export declare function elemToSet<T>(set: Set<T>, x: T): Set<T>;
export declare function arrToSet<T, U>(set: Set<T | U>, arr: Array<U>): Set<T | U>;
export declare function setToSet<T, U>(a: Set<T | U>, b: Set<U>): Set<T | U>;
export declare function loggers(kw?: string): [(v: any) => void, (e: string) => void, () => void];
export declare function notify(kw: string, obs: Observable<any>): Subscription;
export declare function combLastObs(arr: Observable<any>[]): Observable<any>;
export declare function mapComb(arr: Observable<any>[], fn: Function): Observable<any>;
export declare function subComb(arr: Observable<any>[], fn: Function): Subscription;
